// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map(name: "example")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId            String  @map("user_id") @db.Uuid
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map(name: "account")
}

model Session {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id") @db.Uuid
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map(name: "session")
}

model User {
    id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    gender              String?
    name                String?
    phone               String?
    email               String?              @unique
    emailVerified       DateTime?            @map("email_verified")
    image               String?
    billingAddress      String?              @map("billing_address")
    shippingAddress     String?              @map("shipping_address")
    registrationDate    DateTime             @default(now()) @map("registration_date")
    accounts            Account[]
    sessions            Session[]
    events              Event[]
    userFavouriteEvents UserFavouriteEvent[]
    notifications       Notification[]
    userPoint           UserPoint?
    reviews             Review[]

    @@map(name: "user")
}

model VerificationToken {
    identifier String   @id
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_token")
}

model Event {
    id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdUser         String               @map("created_user") @db.Uuid
    title               String
    description         String
    type                String
    category            String
    venue               String
    startTime           DateTime             @map("start_time")
    endTime             DateTime             @map("end_time")
    isDraft             Boolean              @default(true) @map("is_draft")
    user                User                 @relation(fields: [createdUser], references: [id])
    eventStatus         Int                  @default(0) @map("event_status")
    userFavouriteEvents UserFavouriteEvent[]
    tickets             Ticket[]
    reviews             Review[]
    isOnline            Boolean              @default(false) @map("is_online")

    @@map(name: "event")
}

model UserFavouriteEvent {
    id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId  String  @db.Uuid
    eventId String  @db.Uuid
    user    User   @relation(fields: [userId], references: [id])
    event   Event  @relation(fields: [eventId], references: [id])

    @@map(name: "user_favourite_event")
}

model Notification {
    id       Int      @id @default(autoincrement())
    userId   String   @map("user_id") @db.Uuid
    sentDate DateTime @default(now()) @map("sent_date")
    content  String
    user     User     @relation(fields: [userId], references: [id])

    @@map(name: "notification")
}

model UserPoint {
    id     Int    @id @default(autoincrement())
    userId String @unique @map("user_id") @db.Uuid
    points Int
    user   User   @relation(fields: [userId], references: [id])

    @@map(name: "user_point")
}

model Badge {
    id        Int       @id @default(autoincrement())
    userId    String    @map("user_id") @db.Uuid
    typeId    Int       @unique @map("type_id")
    awardDate DateTime  @default(now()) @map("award_date")
    badgeType BadgeType @relation(fields: [typeId], references: [id])

    @@map(name: "badget")
}

model BadgeType {
    id          Int    @id @default(autoincrement())
    title       String
    image       String
    discription String
    badge       Badge?

    @@map(name: "badge_type")
}

model Order {
    id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId           String        @map("user_id") @db.Uuid
    bookDate         DateTime      @default(now()) @map("book_date")
    bookStatus       Boolean       @map("book_status")
    cancellationDate DateTime      @default(now()) @map("cancellation_date")
    orderTickets     OrderTicket[]

    @@map(name: "order")
}

model OrderTicket {
    id       Int    @id @default(autoincrement())
    orderId  String @map("order_id") @db.Uuid
    ticketId Int    @map("ticket_id")
    order    Order  @relation(fields: [orderId], references: [id])
    ticket   Ticket @relation(fields: [ticketId], references: [id])

    @@map(name: "order_ticket")
}

model Ticket {
    id                Int           @id @default(autoincrement())
    eventId           String        @map("event_id") @db.Uuid
    event             Event         @relation(fields: [eventId], references: [id])
    ticketName        String        @map("ticket_name")
    ticketDescription String        @map("ticket_description")
    price             Float
    numberOfTickets   Int           @map("number_of_tickets")
    orderTickets      OrderTicket[]

    @@map(name: "ticket")
}

model Review {
    id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    eventId       String   @map("event_id") @db.Uuid
    userId        String   @map("user_id") @db.Uuid
    reviewDate    DateTime @default(now()) @map("review_date")
    reviewContent String   @map("review_content")
    hostResponse  String?  @map("host_response")
    event         Event    @relation(fields: [eventId], references: [id])
    user          User     @relation(fields: [userId], references: [id])

    @@map(name: "review")
}
